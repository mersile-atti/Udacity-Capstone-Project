version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3.0
  docker: circleci/docker@2.1.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow-id >>"
              aws cloudformation delete-stack --stack-name Capstone-cluster-<<parameters.workflow-id>>
              aws cloudformation delete-stack --stack-name Capstone-groupe-Node-<<parameters.workflow-id>>

jobs:
    lint:
        docker:
            # Use the same Docker base as the project 
          - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: install dependencies
                command: |
                    # Install hadolint
                    make install
            # run lint!
            - run:
                name: Linting docker file
                command: |
                    make lint 
    
    build-and-upload-docker-image:
      docker:
            # Use the same Docker base as the project 
        - image: cimg/node:18.10.0
      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.14
            docker_layer_caching: true
            # run lint!
        - run:
            name: Build docker container
            command: |
              docker build --tag=$DOCKER_IMAGE_NAME . --no-cache
              docker image ls
        - run:
            name: Upload Docker to Dockerhub
            command: |
              echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
              docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
              docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:stable
              docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:stable

    create-infrastructure:
      docker:
        - image: cimg/aws:2022.9
      steps:
        - checkout
        - run:
            name: Create a cluster
            command: |
              aws eks create-cluster \
                --region us-east-1 \
                --name mern-app \
                --kubeconfig=cloudformation/eks-cluster.yml
    deploy:
      docker:
        - image: cimg/aws:2022.09
      steps:
        - checkout
        - kubernetes/install-kubectl
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: mern-app
        - kubernetes/create-or-update-resource:
            get-rollout-status: true
            resource-file-path: .k8s/templates/blue-deployment.yml
            resource-name: deployment/mern-app
            show-kubectl-command: true

workflows:
  default:
    jobs:
      - docker/hadolint:
          dockerfiles: './Dockerfile'
          ignore-rules: 'DL4005,DL3008'
          trusted-registries: 'docker.io,my-company.com:5000'
      - build-and-upload-docker-image
      - create-infrastructure:
          requires: [build-and-upload-docker-image]
      - deploy:
          requires: [create-infrastructure]