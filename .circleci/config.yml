version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3.0
  docker: circleci/docker@2.1.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow-id >>"
              aws cloudformation delete-stack --stack-name Capstone-cluster-<<parameters.workflow-id>>
              aws cloudformation delete-stack --stack-name Capstone-groupe-Node-<<parameters.workflow-id>>

jobs:
    lint:
        docker:
            # Use the same Docker base as the project 
          - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                name: install dependencies
                command: |
                    # Install hadolint
                    make install
            # run lint!
            - run:
                name: Linting docker file
                command: |
                    make lint 
    build-frontend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: Build front-end
            command: |
              cd src/frontend
              npx browserslist@latest --update-db
              npm install
              npm run build
              exit 0
        - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build
  
    build-backend:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Back-end build
            command: |
              cd src/backend
              npm install
              exit 0
        - save_cache:
            paths: [backend/node_modules]
            key: backend-build
    build-and-upload-docker-image:
      docker:
            # Use the same Docker base as the project 
        - image: docker:17.05.0-ce-git
      steps:
        - checkout
        - setup_remote_docker:
            version: 20.10.14
            docker_layer_caching: true
            # run lint!
        - run:
            name: Build docker container
            command: |
              docker build --tag=$DOCKER_IMAGE_NAME . --no-cache
              docker image ls
        - run:
            name: Upload Docker to Dockerhub
            command: |
              echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
              docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
              docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:${CIRCLE_WORKFLOW_ID:0:7}
              docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:stable
    deploy-infrastructure:
      docker:
        - image: cimg/aws:2022.09
      steps:
        - checkout
        - run: aws --version
        - run:
            name: "Create eks cluster"
            no_output_timeout: 30m
            command: |
              cd .circleci/files
              aws cloudformation deploy \
                  --template-file eks-cluster.yml \
                  --tags project=Capstone-project \
                  --stack-name Capstone-cluster-${CIRCLE_WORKFLOW_ID:0:7} \
                  --parameter-overrides file://eks-cluster-params.json \
                  --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"          
        - run:
            name: Create group node for eks
            no_output_timeout: 30m
            command: |
              cd .circleci/files
              aws cloudformation deploy \
                  --template-file eks-node-groupe.yml \
                  --tags project=Capstone-project \
                  --stack-name Capstone-groupe-Node-${CIRCLE_WORKFLOW_ID:0:7} \
                  --parameter-overrides file://eks-groupe-nodes-params.json \
                  --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" 
        - destroy-environment:
            workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
    deploy-app:
      docker:
        - image: cimg/aws:2022.09
      steps:
        - checkout
        - kubernetes/install-kubectl
        - run:
            name: Config kubectl connect to aws
            command: |
              aws eks update-kubeconfig --region us-east-1  --name Capstone-cluster-${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Create deployment
            command: |
              kubectl create deploy udacity-${CIRCLE_WORKFLOW_ID:0:7} --image=$DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            name: Expose deployment
            command: |
              kubectl expose deployment udacity-${CIRCLE_WORKFLOW_ID:0:7} --type=LoadBalancer --name=publicapp-${CIRCLE_WORKFLOW_ID:0:7} --port=80
              sleep 1m
        - run:
            name: store app endpoint and old
            command: |
              cd .circleci/files
              kubectl get services
              api=$(kubectl get services publicapp-${CIRCLE_WORKFLOW_ID:0:7} --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              echo $api >> app-endpoint.txt
              cat app-endpoint.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/files/app-endpoint.txt
        - destroy-environment:
            workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - docker/hadolint:
          dockerfiles: './Dockerfile'
          ignore-rules: 'DL4005,DL3008'
          trusted-registries: 'docker.io,my-company.com:5000'
      - build-frontend
      - build-backend
      - build-and-upload-docker-image
      - deploy-infrastructure:
          requires: [build-and-upload-docker-image]
      - deploy-app:
          requires: [deploy-infrastructure]